	~f#version 450 core
	
	out vec4 color;

	flat in uint numberofvertexes;
	
	layout (std430, binding = 0) buffer vertexdata
	{
		vec4 vertexbuffer[8192];
	};
	
	in vec2 samplecoords;
	
	in float baseline;
	
	int doesintersect(vec2 a, vec2 b)
	{
		float dx = b.x-a.x;
		float dy = b.y-a.y;
		float A = dy;
		float B = -dx;
		float C = dx * a.y - dy * a.x;
		vec2 ray = vec2(1, 0);
		float t = (-C) / (A * ray.x + B * ray.y);
		vec2 intersect = ray*t;
		
		if(intersect.x >= 0)
		{
			if(a.y >= 0)
			{
				if(b.y <= 0)
				{
					return -1;
				}
			}
			else
			{
				if(b.y >= 0)
				{
					return 1;
				}
			}
		}
		return 0;
	}
	
	void main(void)
	{
		if(samplecoords.y >= baseline)
		{
			int c = 0;
			vec4 currentfirstcontour = vertexbuffer[0];
			for(int i = 0; i < numberofvertexes; i++)
			{
				if(currentfirstcontour.z != vertexbuffer[i].z){ currentfirstcontour = vertexbuffer[i]; }
				
				vec2 s = vertexbuffer[i].xy - samplecoords.xy;
				if(vertexbuffer[i+1].z == vertexbuffer[i].z && i != numberofvertexes-1)
				{
					vec2 e = vertexbuffer[i+1].xy - samplecoords.xy;
					c += doesintersect(s, e);
				}
				else
				{
					vec2 e = currentfirstcontour.xy - samplecoords.xy;
					c += doesintersect(s, e);
				}
			}
			
			if(c != 0){ color = vec4(1, 0, 1, 1); }
			else {color = vec4(0, 0, 0, 0);}
		}
	}